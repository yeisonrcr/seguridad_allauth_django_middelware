# Generated by Django 4.2.19 on 2025-03-04 05:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='phone number')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('is_2fa_enabled', models.BooleanField(default=False, verbose_name='2FA enabled')),
                ('failed_login_attempts', models.PositiveSmallIntegerField(default=0, verbose_name='failed login attempts')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last login IP')),
                ('last_login_user_agent', models.TextField(blank=True, verbose_name='last login user agent')),
                ('is_locked', models.BooleanField(default=False, verbose_name='account locked')),
                ('lock_expiration', models.DateTimeField(blank=True, null=True, verbose_name='lock expiration')),
                ('totp_secret', models.CharField(blank=True, max_length=255, verbose_name='TOTP secret')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_password_change', models.DateTimeField(blank=True, null=True, verbose_name='last password change')),
                ('require_password_change', models.BooleanField(default=False, verbose_name='require password change')),
                ('session_security_hash', models.CharField(blank=True, max_length=64, verbose_name='session security hash')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': [('can_reset_2fa', 'Can reset 2FA for users'), ('can_unlock_accounts', 'Can unlock locked user accounts'), ('can_view_user_logs', 'Can view user activity logs'), ('can_export_user_data', 'Can export user data')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='role name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('priority', models.PositiveSmallIntegerField(default=0, verbose_name='priority')),
                ('is_system_role', models.BooleanField(default=False, verbose_name='system role')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('parent_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_roles', to='usuarios.userrole', verbose_name='parent role')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'user role',
                'verbose_name_plural': 'user roles',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='UserRoleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, verbose_name='assigned at')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expires at')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='role_assignments_given', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='usuarios.userrole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'role assignment',
                'verbose_name_plural': 'role assignments',
                'unique_together': {('user', 'role')},
            },
        ),
    ]
